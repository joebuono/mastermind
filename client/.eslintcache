[{"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/index.js":"1","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/globalLogic.js":"2","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/filterPermutations.js":"3","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/App.jsx":"4","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/colorTracker/ColorTracker.jsx":"5","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/Colors.jsx":"6","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/SecretCode.jsx":"7","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/Color.jsx":"8","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/BlackAndWhitePegs.jsx":"9","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/colorTracker/Title.jsx":"10","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/colorTracker/Headers.jsx":"11","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/colorTracker/RowsContainer.jsx":"12","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/colorTracker/Row.jsx":"13","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/Turns.jsx":"14","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/Turn.jsx":"15","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/ComputerBoard.jsx":"16","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/updateColorTracker.js":"17","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/generateNextGuess.js":"18","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/generatePermutations.js":"19","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/guessHelperFunctions.js":"20","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/GameView.jsx":"21","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/PlayerBoard.jsx":"22"},{"size":233,"mtime":1611869654271,"results":"23","hashOfConfig":"24"},{"size":1051,"mtime":1611773902428,"results":"25","hashOfConfig":"24"},{"size":1525,"mtime":1611172870627,"results":"26","hashOfConfig":"24"},{"size":399,"mtime":1612478370984,"results":"27","hashOfConfig":"24"},{"size":545,"mtime":1611872041954,"results":"28","hashOfConfig":"24"},{"size":375,"mtime":1611870023562,"results":"29","hashOfConfig":"24"},{"size":325,"mtime":1611870038256,"results":"30","hashOfConfig":"24"},{"size":408,"mtime":1611869980294,"results":"31","hashOfConfig":"24"},{"size":1207,"mtime":1612467416966,"results":"32","hashOfConfig":"24"},{"size":206,"mtime":1611871693954,"results":"33","hashOfConfig":"24"},{"size":226,"mtime":1611871852238,"results":"34","hashOfConfig":"24"},{"size":827,"mtime":1611872780349,"results":"35","hashOfConfig":"24"},{"size":383,"mtime":1611872814061,"results":"36","hashOfConfig":"24"},{"size":724,"mtime":1612469515826,"results":"37","hashOfConfig":"24"},{"size":468,"mtime":1612468214357,"results":"38","hashOfConfig":"24"},{"size":5704,"mtime":1612478058008,"results":"39","hashOfConfig":"24"},{"size":3173,"mtime":1611259414958,"results":"40","hashOfConfig":"24"},{"size":7438,"mtime":1611346044238,"results":"41","hashOfConfig":"24"},{"size":1789,"mtime":1611257992319,"results":"42","hashOfConfig":"24"},{"size":4509,"mtime":1611289364687,"results":"43","hashOfConfig":"24"},{"size":1043,"mtime":1612478964053,"results":"44","hashOfConfig":"24"},{"size":4501,"mtime":1612478957226,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"13s9dwu",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/index.js",[],["92","93"],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/globalLogic.js",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/filterPermutations.js",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/App.jsx",["94"],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/colorTracker/ColorTracker.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/Colors.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/SecretCode.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/Color.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/BlackAndWhitePegs.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/colorTracker/Title.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/colorTracker/Headers.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/colorTracker/RowsContainer.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/colorTracker/Row.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/Turns.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/Turn.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/ComputerBoard.jsx",["95","96","97","98","99"],"import React, { Component } from 'react';\nimport styles from '../styles/board.module.css';\nimport Colors from './Colors.jsx';\nimport SecretCode from './SecretCode.jsx';\nimport Turns from './Turns.jsx';\nimport ColorTracker from '../colorTracker/ColorTracker.jsx';\nconst { initializeGame } = require('../../solverAlgorithm/globalLogic');\nconst { generateAllPermutations } = require('../../solverAlgorithm/generatePermutations');\nconst { getBlackAndWhitePegs, filterForPossibleSolutions } = require('../../solverAlgorithm/filterPermutations');\nconst { updateColorTracker } = require('../../solverAlgorithm/updateColorTracker');\nconst { generateNextGuess } = require('../../solverAlgorithm/generateNextGuess');\n\n/*\n\nThis will essentially become a class component of gameLogic.js\n- Without the while loop, so the user can click through to the next computer guess\n- (Later, we can implement autoplay for the computer moves with setTimeout)\n\n\nI think it's better to have ColorTracker be a child component of Board\n\n\n**** GLOBAL VARIABLES ****\n- To be held in state\n  const CODE_SIZE = secretTestCode ? secretTestCode.length : 4;\n\n  let [COLORS, SECRET_CODE, COLOR_TRACKER] = initializeGame(CODE_SIZE);\n\n  // *** TESTING *** //\n  SECRET_CODE = secretTestCode || SECRET_CODE;\n  // *** TESTING *** //\n\n  let COLORS_TRIED_THUS_FAR = [];\n\n  // To start, our first template is ['x', 'x', 'x', 'x'] or ['x', 'x', 'x', 'x', 'x'], depending on the size of the code\n  let templates = [new Array(CODE_SIZE).fill('x')];\n\n  // This stores our current guess\n  let guess = [];\n\n  let previousGuesses = new Set();\n\n  let priorRounds = {};\n\n  let colorOrColorsUsedToFillTemplate = [];\n\n  let CURRENT_ROUND = 1;\n  const ROUND_LIMIT = 12;\n\n*/\n\nclass ComputerBoard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colorOptions: [], // 'n', 'w' for codeSize 5\n      // hard-coded for now, later, implement modal for human player to select secretCode\n      secretCode: ['b', 'p', 'p', 'r'],\n      turns: [],\n      totalRounds: 10, // later on, we'll have to make the board dynamically size according to the number of rounds\n      currentRound: 1,\n      codeSize: 4, // there has to be a better way to do this\n      colorTracker: {},\n      winCondition: null\n    };\n    this.updateCurrentGuess = this.updateCurrentGuess.bind(this);\n    this.getNextComputerGuess = this.getNextComputerGuess.bind(this);\n  }\n\n  getCurrentGuess() {\n    return [...this.state.turns][this.state.currentRound - 1].guess;\n  }\n\n  updateCurrentGuess(colorToAddToGuess) {\n    console.log('clicked color:', colorToAddToGuess);\n    let currentGuess = this.getCurrentGuess();\n\n    // add color to guess\n    for (let i = 0; i < currentGuess.length; i++) {\n      if (currentGuess[i] === 'x') {\n        currentGuess[i] = colorToAddToGuess;\n        break;\n      }\n    }\n\n    // update turns with current guess\n    let copyOfTurns = [...this.state.turns];\n    copyOfTurns[this.state.currentRound - 1].guess = currentGuess;\n    this.setState({\n      turns: copyOfTurns\n    });\n  }\n\n  getNextComputerGuess() {\n    console.log('clicked get next computer guess');\n    let currentGuess = this.getCurrentGuess();\n    // check if the guess is completely filled (no x's)\n    if (!currentGuess.includes('x')) {\n      console.log('checking the guess!');\n      const updatedBWPegs = getBlackAndWhitePegs(currentGuess, this.state.secretCode);\n      console.log(updatedBWPegs);\n\n      // update current guess with updatedBWPegs\n      const copyOfTurns = [...this.state.turns];\n      copyOfTurns[this.state.currentRound - 1].bwPegs = updatedBWPegs;\n\n      // check win and lose condition\n      const nextRound = this.state.currentRound + 1;\n\n      const updatedWinCondition = this.checkWinCondition(nextRound, updatedBWPegs);\n\n      this.setState({\n        turns: copyOfTurns,\n        currentRound: nextRound,\n        winCondition: updatedWinCondition,\n        // colorTracker\n      });\n\n    }\n  }\n\n  checkWinCondition(nextRound, bwPegs) {\n    let updatedWinCondition = null;\n\n    // check lose condition\n    if (nextRound > this.state.totalRounds) {\n      console.log('You lose. Play again?');\n      updatedWinCondition = false;\n    } else {\n      // check win condition\n      if (bwPegs[0] === this.state.codeSize) {\n        console.log('YOU WIN!');\n        updatedWinCondition = true;\n      }\n    }\n    return updatedWinCondition;\n  }\n\n  componentDidMount() {\n    // we don't need the secretCode to be automatically generated\n    // that's only for testing purposes\n    let [colorOptions, colorTracker] = initializeGame(this.state.codeSize);\n \n    const initializedEmptyTurns = [];\n\n    // initialize turns to empty\n    for (let i = 0; i < 10; i++) {\n      initializedEmptyTurns.push({\n        guess: ['x', 'x', 'x', 'x'],\n        bwPegs: [0, 0]\n      });\n    }\n\n    this.setState({\n      colorOptions,\n      colorTracker,\n      turns: initializedEmptyTurns\n    });\n  }\n\n  render() {\n    const { colorOptions, secretCode, turns, codeSize, winCondition } = this.state;\n\n    return (\n      <div className={styles.boardContainer}>\n        <div className={styles.secretCode}>\n          <SecretCode secretCode={secretCode} />\n        </div>\n        <div className={styles.turns}>\n          <Turns turns={turns} codeSize={codeSize} />\n        </div>\n        <div className={styles.colors}>\n          <Colors colors={colorOptions} updateCurrentGuess={this.updateCurrentGuess} />\n        </div>\n        <button onClick={this.getNextComputerGuess}>Next Computer Guess</button>\n        {winCondition && <h1>The computer wins!</h1>}\n        {winCondition === false && <h1>The computer loses!</h1>}\n      </div>\n    );\n  }\n}\n\nexport default ComputerBoard;","/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/updateColorTracker.js",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/generateNextGuess.js",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/generatePermutations.js",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/solverAlgorithm/guessHelperFunctions.js",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/GameView.jsx",[],"/Users/joebuono/Desktop/Coding/mastermind/mastermind/client/src/components/board/PlayerBoard.jsx",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":7,"column":3,"nodeType":"106","messageId":"107","endLine":9,"endColumn":4},{"ruleId":"108","severity":1,"message":"109","line":6,"column":8,"nodeType":"110","messageId":"111","endLine":6,"endColumn":20},{"ruleId":"108","severity":1,"message":"112","line":8,"column":9,"nodeType":"110","messageId":"111","endLine":8,"endColumn":32},{"ruleId":"108","severity":1,"message":"113","line":9,"column":31,"nodeType":"110","messageId":"111","endLine":9,"endColumn":57},{"ruleId":"108","severity":1,"message":"114","line":10,"column":9,"nodeType":"110","messageId":"111","endLine":10,"endColumn":27},{"ruleId":"108","severity":1,"message":"115","line":11,"column":9,"nodeType":"110","messageId":"111","endLine":11,"endColumn":26},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'ColorTracker' is defined but never used.","Identifier","unusedVar","'generateAllPermutations' is assigned a value but never used.","'filterForPossibleSolutions' is assigned a value but never used.","'updateColorTracker' is assigned a value but never used.","'generateNextGuess' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]